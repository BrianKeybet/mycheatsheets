#To enable https on a website we need to get a certificate form a certificate authority (CA) like LetsEncrypt(90 days) or Digicert(1 year). The CA needs to verify that you control your domain before issuing the certificate.
#For LetsEncrypyt, the verifications is done via a software that uses the ACME protocol typically running on your web host. I prefer certbot.

# Set A records on domain service provider to have the subdomain and IP that it points to. Confirms domain ownership and validates traffic when using HTTP based validation (DNS based validation exists)

# Generate a Certificate Signing Request (CSR) - Generated on your server and contains details like domain name and organisation. Sent to CA.
1. Install OpenSSL
    sudo apt install openssl
2. Generate a private key
    openssl genrsa -out yourdomain.key 2048
3. Generate the CSR. This command will prompt you to enter information about your organization.
    openssl req -new -key yourdomain.key -out yourdomain.csr


##LetsEncrypt Certbot Nginx Ubuntu
# https://certbot.eff.org/instructions?ws=nginx&os=pip
1. SSH  into server
2. Install system dependencies;
    sudo apt update
    sudo apt install python3 python3-venv libaugeas0
3. Remove certbot-auto and any Certbot OS packages;
    sudo apt-get remove certbot
4. Set up a Python virtual environment
    sudo python3 -m venv /opt/certbot/
    sudo /opt/certbot/bin/pip install --upgrade pip
5. Install Certbot
    sudo /opt/certbot/bin/pip install certbot certbot-nginx
6. Prepare the Certbot command
    sudo ln -s /opt/certbot/bin/certbot /usr/bin/certbot
7. Get certbot certificate
    sudo certbot certonly --nginx
8. It will need renewal so set cron jobs for renewal & upgrade

# Common Certbot Certificate Files
## When you obtain an SSL certificate using Certbot, it generates several files in /etc/letsencrypt/live/yourdomain.com/:

1. fullchain.pem: This file contains the entire certificate chain (your certificate plus any intermediate certificates required by browsers). It is usually the primary file used for SSL configurations on servers.

2. cert.pem: This is your website's individual SSL certificate file without the intermediate certificates. Some servers may use this, though most configurations prefer the full chain.

3. privkey.pem: This file holds your private key, which should be kept secure and never shared publicly. It is referenced in your server configuration to complete the SSL setup.

4. chain.pem: This file includes only the intermediate certificates that link your certificate to the root CA. Itâ€™s sometimes used if your server specifically requests separate chain files.

##Digicert Nginx Ubuntu
# https://www.digicert.com/kb/csr-ssl-installation/nginx-openssl.htm#ssl_certificate_install
1. Log into Digicert account
2. Go to orders > Request a certificate > Standard SSL >
3. Upload a CSR add extra details and download the certificate
4. Nginx typically requires only ssl_certificate, which can point to a full chain certificate (a file containing both your site certificate and the intermediate certificates),
   concatenate your primary certificate and intermediate certificate(s) into a single file

##NGinx Configuration
# .pem & .crt are interchangeable
1. Set ssl_certificate & ssl_certificate_key e.g;
    server {
        listen 443 ssl;
        server_name yourdomain.com;

        ssl_certificate /path/to/your_certificate.crt;
        ssl_certificate_key /path/to/your_private.key;

        # Optional settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
    }


